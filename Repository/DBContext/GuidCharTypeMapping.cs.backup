using System;
using System.Data;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Repository.DBContext
{
    internal sealed class GuidCharTypeMapping : GuidTypeMapping
    {
        private static readonly ValueConverter<Guid, string> GuidConverter =
            new(v => v.ToString("D"), v => Guid.Parse(v));

        private static readonly ValueConverter<Guid?, string?> NullableGuidConverter =
            new(v => v.HasValue ? v.Value.ToString("D") : null,
                v => string.IsNullOrWhiteSpace(v) ? (Guid?)null : Guid.Parse(v!));

        public GuidCharTypeMapping(Type clrType)
            : base(CreateParameters(clrType))
        {
        }

        private GuidCharTypeMapping(RelationalTypeMappingParameters parameters)
            : base(parameters)
        {
        }

        private static RelationalTypeMappingParameters CreateParameters(Type clrType)
        {
            var converter = clrType == typeof(Guid)
                ? (ValueConverter)GuidConverter
                : NullableGuidConverter;

            var coreParameters = new CoreTypeMappingParameters(
                clrType,
                converter);

            return new RelationalTypeMappingParameters(
                coreParameters,
                storeType: "char(36)",
                StoreTypePostfix.Size,
                System.Data.DbType.String,
                unicode: false,
                size: 36,
                fixedLength: true);
        }

        protected override RelationalTypeMapping Clone(RelationalTypeMappingParameters parameters)
            => new GuidCharTypeMapping(parameters);

        protected override string GenerateNonNullSqlLiteral(object value)
        {
            if (value is Guid guidValue)
            {
                return $"'{guidValue:D}'";
            }

            if (value is string stringValue)
            {
                return $"'{stringValue}'";
            }

            if (value is Guid nullableGuidValue)
            {
                return $"'{nullableGuidValue:D}'";
            }

            return base.GenerateNonNullSqlLiteral(value);
        }
    }
}
